from flask import Flask, request, redirect
import os
from datetime import datetime

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL (Railway —Å–∞–º –µ—ë –∑–∞–¥–∞—ë—Ç)
import psycopg2
from psycopg2.extras import RealDictCursor

app = Flask(__name__)

def get_db_connection():
    database_url = os.environ.get("DATABASE_URL")
    if not database_url:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–µ—Å—Ç–∏—Ç—å –±–µ–∑ Railway)
        raise Exception("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω")
    conn = psycopg2.connect(database_url, sslmode='require')
    return conn

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS clicks (
            id SERIAL PRIMARY KEY,
            ip_address TEXT NOT NULL,
            click_time TIMESTAMP NOT NULL
        )
    ''')
    conn.commit()
    cur.close()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

@app.route('/<short_url>')
def track_click(short_url):
    target_url = request.args.get('to')
    if not target_url:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'to'", 400

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–∫—Å–∏, –∫–∞–∫ –≤ Railway)
    if request.headers.getlist("X-Forwarded-For"):
        user_ip = request.headers.getlist("X-Forwarded-For")[0].split(',')[0]
    else:
        user_ip = request.remote_addr

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–∫
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO clicks (ip_address, click_time) VALUES (%s, %s)",
        (user_ip, datetime.utcnow())
    )
    conn.commit()
    cur.close()
    conn.close()
    return redirect(target_url)

@app.route('/stats')
def show_stats():
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute("SELECT id, ip_address, click_time FROM clicks ORDER BY click_time DESC")
        records = cur.fetchall()
        cur.close()
        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Ç–∞–±–ª–∏—Ü—É
        html = """
        <html>
        <head>
            <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–∫–æ–≤</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; padding: 20px; }
                table { border-collapse: collapse; width: 100%; max-width: 800px; }
                th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
                th { background-color: #f5f5f5; }
                tr:nth-child(even) { background-color: #fafafa; }
            </style>
        </head>
        <body>
            <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–∫–æ–≤</h1>
            <p>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {}</p>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>IP-–∞–¥—Ä–µ—Å</th>
                        <th>–í—Ä–µ–º—è (UTC)</th>
                    </tr>
                </thead>
                <tbody>
        """.format(len(records))

        for row in records:
            html += "<tr><td>{}</td><td>{}</td><td>{}</td></tr>".format(
                row['id'], row['ip_address'], row['click_time']
            )

        html += """
                </tbody>
            </table>
            <br>
            <a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è</a>
        </body>
        </html>
        """
        return html

    except Exception as e:
        return f"<h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</h2><pre>{e}</pre>"

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

